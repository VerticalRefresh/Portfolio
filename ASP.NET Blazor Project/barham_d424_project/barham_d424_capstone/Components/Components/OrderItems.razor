<!--For EditForm-->
@using Microsoft.AspNetCore.Components.Forms

<!--Application DB and Data Models-->
@using barham_d424_capstone.Data
@using barham_d424_capstone.Models

<!--For Db behaviors-->
@using Microsoft.EntityFrameworkCore

<!--For Db Interaction-->
@inject AppDbContext DbContext

<!--For Interactivity-->
@rendermode InteractiveServer

<!--Title-->
<h4>Invoice</h4>

<!--Data Table-->
<table class="table table-hover">
    <!--Table Column Labels-->
    <thead>
        <tr>
            <th>Product ID</th>
            <th>Product Name</th>
            <th>Quantity</th>
            <th>Price</th>
            <th>Total</th>
            @if (CanEdit)  //Not available on shipped+ orders
            {
                <th>Actions</th>
            }
        </tr>
    </thead>

    <!--Line Items-->
    <tbody>
        @if (Items != null)
        {
            foreach (var item in Items)
            {
                <tr>
                    <td>@item.Product.ID</td>
                    <td>@item.Product.Name</td>
                    @if (ItemToEdit == item)
                    {
                        <InputNumber class="form-control" @bind-Value="adjustedQuantity"/>
                    }
                    else
                    {
                        <td>@item.Quantity</td>
                    }
                    <td>@item.PriceAtOrder.ToString("C")</td>
                    <td>@((item.Quantity* item.PriceAtOrder).ToString("C"))</td>
                    @if (CanEdit)  //cannot delete line items on shipped+ orders
                    {
                        <td>
                            @if (ItemToEdit == item)
                            {
                                <button class="btn btn-secondary btn-sm" @onclick="() => SaveItem(item)">Save</button>
                                <button class="btn btn-danger btn-sm" @onclick="(() => ItemToEdit = null)">Cancel</button>
                            }
                            else
                            {
                                <button class="btn btn-secondary btn-sm" @onclick="() => EditItem(item)">Edit</button>
                                <button class="btn btn-danger btn-sm" @onclick="() => DeleteItemConfirmation(item)">Delete</button>
                            }
                        </td>
                        
                    }
                </tr>
            }
        }
    </tbody>
</table>

<!--Total-->
<div>
    Total Invoice: @(Items.Sum(i => i.Quantity * i.PriceAtOrder).ToString("C"))
</div>

@if (DeleteConfirmation) //Delete confirmation warning
{
    <div class="alert-warning">
        <p>Are you sure you want to delete this item?</p>
        <button class="btn btn-danger" @onclick="DeleteItemFromList">Yes</button>
        <button class="btn btn-secondary" @onclick="() => DeleteConfirmation = false">No</button>
    </div>
}

@code 
{
    [Parameter] public List<OrderItem> Items { get; set; } = new List<OrderItem>(); //Line items

    [Parameter] public Order Order { get; set; } = new Order(); //Order the items come from

    [Parameter] public List<Product> Products { get; set; } = new List<Product>(); //Products list

    [Parameter] public bool CanEdit { get; set; } = true; //Only allow edits if not shipped

    public Product? product { get; set; }

    private OrderItem AddProduct { get; set; } = new();

    private bool DeleteConfirmation { get; set; } = false;

    private OrderItem? ItemToDelete { get; set; }
    private OrderItem? ItemToEdit { get; set; }
    private int adjustedQuantity;

    private decimal invoiceTotal { get; set; } = 0.00m;

    protected override async Task OnInitializedAsync()
    {
        Items = Order.OrderItems?.ToList() ?? new List<OrderItem>();
        foreach (OrderItem orderItem in Items)
        {
            invoiceTotal = invoiceTotal + (orderItem.Quantity * orderItem.PriceAtOrder);
        }
    }



    private void EditItem(OrderItem item)
    {
        adjustedQuantity = item.Quantity;
        ItemToEdit = item;
    }

    private void SaveItem(OrderItem item)
    {
        item.Quantity = adjustedQuantity;
        ItemToEdit = null;
    }

    private void DeleteItemConfirmation(OrderItem item) //confirm delete
    {
        if (item != null)
        {
            ItemToDelete = item;
            DeleteConfirmation = true;
        }
        else
        {
            DeleteConfirmation = false;
        }
    }

    private async Task DeleteItemFromList() //finalize delete 
    {
        if (ItemToDelete != null && Items.Contains(ItemToDelete))
        {
            Items.Remove(ItemToDelete);
            DeleteConfirmation = false;
            ItemToDelete = null;

        }
        else
        {
            DeleteConfirmation = false;
        }
    }
}



