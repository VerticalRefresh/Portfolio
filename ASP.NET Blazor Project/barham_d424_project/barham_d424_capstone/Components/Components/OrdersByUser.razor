@using System.Text
@using Microsoft.EntityFrameworkCore
@inject AppDbContext DbContext
@inject ILogger<OrdersByUser> Logger
@inject IJSRuntime JS

@rendermode InteractiveServer

<h3>Orders By User</h3>
<p class="text-muted">Generated on @DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")</p>
@if (ReportData == null)
{
    <p><em>Loading...</em></p>
}
else if (!ReportData.Any())
{
    <p>No orders found.</p>
}
else
{
    <button class="btn btn-secondary mb-3" @onclick="ExportCsv">Download CSV</button>
}

<table class="table table-bordered table-striped">
    <thead class="table-dark">
        <tr>
            <th>User</th>
            <th>Email</th>
            <th>Total Orders</th>
            <th>Total Value</th>
        </tr>
    </thead>

    <tbody>
        @foreach (var entry in ReportData)
        {
            <tr>
                <td>@entry.Name</td>
                <td>@entry.Email</td>
                <td>@entry.OrderCount</td>
                <td>@entry.TotalValue.ToString("C")</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<UserOrderReport> ReportData { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        ReportData = await DbContext.Orders
        .Include(o => o.User)
        .GroupBy(o => new { o.User.UserID, o.User.Name, o.User.Email })
        .Select(g => new UserOrderReport
        {
            UserID = g.Key.UserID,
            Name = g.Key.Name,
            Email = g.Key.Email,
            OrderCount = g.Count(),
            TotalValue = g.Sum(o => o.OrderTotal)
        })
        .OrderByDescending(r => r.TotalValue)
        .ToListAsync();

        Logger.LogInformation($"Loaded {ReportData.Count} user order summaries");
    }

    private async Task ExportCsv()
    {
        var csv = new StringBuilder();
        csv.AppendLine($"Orders By User Report, Generated on {DateTime.Now:yyyy-MM-dd HH:mm:ss}");
        csv.AppendLine();
        csv.AppendLine("User, Email, Total Orders, Total Value");
        foreach (var row in ReportData)
        {
            csv.AppendLine($"\"{row.Name}\", \"{row.Email}\", {row.OrderCount}, {row.TotalValue}");
        }

        var bytes = Encoding.UTF8.GetBytes(csv.ToString());

        var fileName = $"Report-{DateTime.Now:yyyyMMdd}.csv";

        var fileContent = new MemoryStream(bytes);

        using var streamRef = new DotNetStreamReference(stream: fileContent);
        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    private class UserOrderReport
    {
        public int UserID { get; set; }
        public string Name { get; set; } = "";
        public string Email { get; set; } = "";
        public int OrderCount { get; set; }
        public decimal TotalValue { get; set; }
    }
}
