@page "/login"

@using Microsoft.AspNetCore.Components.Web
@using System.ComponentModel.DataAnnotations
@using barham_d424_capstone.Services

@inject NavigationManager NavigationManager
@inject AuthService AuthService
@inject ILogger<Login> Logger


<h3>Login</h3>

<!--Error message block-->
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

<!--Login form-->
<EditForm Model="loginModel" OnValidSubmit="HandleLogin" FormName="LoginForm" method="post">
    
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    <div class="mb-3">
        <label for="username" class="form-label">Username</label>
        <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
        <ValidationMessage For="@(() => loginModel.Username)" />
    </div>

    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
    </div>

    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

@code{
    [SupplyParameterFromForm]
    public LoginModel loginModel { get; set; } = new LoginModel();
    
    private string? ErrorMessage;

    private async Task HandleLogin()
    {
        ErrorMessage = null;

        var result = await AuthService.Login(loginModel.Username, loginModel.Password);
        if (result.Success)
        {
            if (result.RequiresPasswordReset)
            {
                NavigationManager.NavigateTo($"/resetpassword/{result.UserID.ToString()}", forceLoad: true);
            }
            else
            {
                NavigationManager.NavigateTo("/", forceLoad: true);
            }
        }
        else
        {
            ErrorMessage = "Invalid username or password.";
        }
    }

    private bool VerifyPassword(string hashedPassword, string password)
    {
        return BCrypt.Net.BCrypt.Verify(password, hashedPassword);
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Username is required.")]
        public string Username { get; set; } = string.Empty;
        [Required(ErrorMessage = "Password is required.")]
        public string Password { get; set; } = string.Empty;
    }
}