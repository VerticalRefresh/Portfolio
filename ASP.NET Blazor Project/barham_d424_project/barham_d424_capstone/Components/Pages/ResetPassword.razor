@page "/resetpassword/{UserID:int}"

@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore

@inject NavigationManager Navigation
@inject AppDbContext AppDbContext

@attribute [Authorize]

@rendermode InteractiveServer

<h3>Password Reset</h3>

<EditForm Model="resetPasswordModel" OnValidSubmit="NewPasswordSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">New Password</label>
        <InputText type="password" class="form-control" @bind-Value="resetPasswordModel.NewPassword" />
        <ValidationMessage For="@(() => resetPasswordModel.NewPassword)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Confirm Password</label>
        <InputText type="password" class="form-control" @bind-Value="resetPasswordModel.ConfirmPassword" />
        <ValidationMessage For="@(() => resetPasswordModel.ConfirmPassword)" />
    </div>

    <button class="btn btn-primary" type="submit">Reset Password</button>
</EditForm>

@if (NoMatch)
{
    <div class="alert alert-danger mt-3">Passwords do not match.</div>
}

@code
{
    [Parameter] public int UserID { get; set; }

    private bool NoMatch { get; set; } = false;

    private ResetPasswordModel resetPasswordModel = new ResetPasswordModel();

    private async Task NewPasswordSubmit()
    {
        if (resetPasswordModel.NewPassword != resetPasswordModel.ConfirmPassword)
        {
            NoMatch = true;
            return;
        }
        else
        {
            var user = await AppDbContext.Users.FirstOrDefaultAsync(u => u.UserID == UserID);
            user.PasswordHash = BCrypt.Net.BCrypt.HashPassword(resetPasswordModel.NewPassword);
            user.NewPassword = false;
            user.FailedLoginAttempts = 0;
            user.LockoutEnd = null; // Reset lockout if applicable
            await AppDbContext.SaveChangesAsync();
            Navigation.NavigateTo("/", forceLoad: true);  
        }
    }

    public class ResetPasswordModel
    {
        [Required(ErrorMessage = "New password is required.")]
        [StringLength(100, ErrorMessage = "Password must be at least 6 characters long.", MinimumLength = 6)]
        public string NewPassword { get; set; } = string.Empty;

        [Required(ErrorMessage = "Please confirm your new password.")]
        [Compare("NewPassword", ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}

 
