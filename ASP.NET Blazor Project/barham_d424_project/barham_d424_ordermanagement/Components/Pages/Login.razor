<h3>Login</h3>

<!--Injections and Using-->
@page "/login"
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using barham_d424_ordermanagement.Services
@using Microsoft.EntityFrameworkCore
@inject AppDbContext DbContext
@inject NavigationManager Navigation
@inject ILogger<Login> Logger
@inject IHttpContextAccessor HttpContextAccessor
@rendermode InteractiveServer


<!--Error message block-->
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}
<button class="btn btn-secondary" @onclick="LogClick">Test Logger Button</button>




<!--Login form-->
<EditForm Model="loginModel" OnValidSubmit="HandleLogin" FormName="LoginForm">
    
    <!--Annotations and validation summary-->
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    <div class="mb-3">
        <label for="username" class="form-label">Username</label>
        <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
        <ValidationMessage For="@(() => loginModel.Username)" />
    </div>
    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
    </div>
    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

@code{
    private LoginModel loginModel = new();
    private string? ErrorMessage;

    private void LogClick()
    {
        Logger.LogWarning("✅ The test button was clicked.");
    }

    private async Task HandleLogin()
    {
        Logger.LogWarning($"Attempting to log in user: {loginModel.Username}");
        Logger.LogWarning($"Passowrd: {loginModel.Password}");
        try
        {


            Console.WriteLine($"Attempting to log in user: {loginModel.Username}");
            Console.WriteLine($"Password: {loginModel.Password}");
            var user = await DbContext.Users
            .Include(u => u.Role)
            .FirstOrDefaultAsync(u => u.UserName == loginModel.Username);

            if (user == null || !VerifyPassword(user.PasswordHash, loginModel.Password))
            {
                ErrorMessage = "Invalid username or password.";
                return;
            }

            var claims = new List<Claim>
            {
                new Claim(ClaimTypes.Name, user.UserName),
                new Claim(ClaimTypes.Role, user.Role.RoleName),
                new Claim("UserID", user.UserID.ToString())
            };

            var claimsIdentity = new ClaimsIdentity(claims, "Cookies");
            var claimsPrincipal = new ClaimsPrincipal(claimsIdentity);

            await HttpContextAccessor.HttpContext!.SignInAsync("Cookies", claimsPrincipal);
            Navigation.NavigateTo("/dashboard");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "An error occurred during login.");
            ErrorMessage = "An error occurred during login. Please try again later.";
        }
    }

    private bool VerifyPassword(string hashedPassword, string password)
    {
        // Implement your password verification logic here
        // For example, using BCrypt or any other hashing algorithm
        return hashedPassword == password; // Placeholder for actual verification logic
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Username is required.")]
        public string Username { get; set; } = string.Empty;
        [Required(ErrorMessage = "Password is required.")]
        public string Password { get; set; } = string.Empty;
    }
}-->